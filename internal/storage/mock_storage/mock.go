// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	sql "database/sql"
	reflect "reflect"

	dtos "github.com/adepte-myao/avito_internship/internal/dtos"
	models "github.com/adepte-myao/avito_internship/internal/models"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountRepo) CreateAccount(tx *sql.Tx, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepoMockRecorder) CreateAccount(tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepo)(nil).CreateAccount), tx, id)
}

// DecreaseBalance mocks base method.
func (m *MockAccountRepo) DecreaseBalance(tx *sql.Tx, id int32, value decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseBalance", tx, id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseBalance indicates an expected call of DecreaseBalance.
func (mr *MockAccountRepoMockRecorder) DecreaseBalance(tx, id, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseBalance", reflect.TypeOf((*MockAccountRepo)(nil).DecreaseBalance), tx, id, value)
}

// GetAccount mocks base method.
func (m *MockAccountRepo) GetAccount(tx *sql.Tx, id int32) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", tx, id)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountRepoMockRecorder) GetAccount(tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountRepo)(nil).GetAccount), tx, id)
}

// IncreaseBalance mocks base method.
func (m *MockAccountRepo) IncreaseBalance(tx *sql.Tx, id int32, value decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseBalance", tx, id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseBalance indicates an expected call of IncreaseBalance.
func (mr *MockAccountRepoMockRecorder) IncreaseBalance(tx, id, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseBalance", reflect.TypeOf((*MockAccountRepo)(nil).IncreaseBalance), tx, id, value)
}

// MockReservationRepo is a mock of ReservationRepo interface.
type MockReservationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReservationRepoMockRecorder
}

// MockReservationRepoMockRecorder is the mock recorder for MockReservationRepo.
type MockReservationRepoMockRecorder struct {
	mock *MockReservationRepo
}

// NewMockReservationRepo creates a new mock instance.
func NewMockReservationRepo(ctrl *gomock.Controller) *MockReservationRepo {
	mock := &MockReservationRepo{ctrl: ctrl}
	mock.recorder = &MockReservationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationRepo) EXPECT() *MockReservationRepoMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method.
func (m *MockReservationRepo) CreateReservation(tx *sql.Tx, reservation models.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", tx, reservation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockReservationRepoMockRecorder) CreateReservation(tx, reservation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockReservationRepo)(nil).CreateReservation), tx, reservation)
}

// GetReservation mocks base method.
func (m *MockReservationRepo) GetReservation(tx *sql.Tx, reservationDto dtos.ReservationDto, state models.ReserveState) (models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservation", tx, reservationDto, state)
	ret0, _ := ret[0].(models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservation indicates an expected call of GetReservation.
func (mr *MockReservationRepoMockRecorder) GetReservation(tx, reservationDto, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservation", reflect.TypeOf((*MockReservationRepo)(nil).GetReservation), tx, reservationDto, state)
}

// MockSQLTransactionHelper is a mock of SQLTransactionHelper interface.
type MockSQLTransactionHelper struct {
	ctrl     *gomock.Controller
	recorder *MockSQLTransactionHelperMockRecorder
}

// MockSQLTransactionHelperMockRecorder is the mock recorder for MockSQLTransactionHelper.
type MockSQLTransactionHelperMockRecorder struct {
	mock *MockSQLTransactionHelper
}

// NewMockSQLTransactionHelper creates a new mock instance.
func NewMockSQLTransactionHelper(ctrl *gomock.Controller) *MockSQLTransactionHelper {
	mock := &MockSQLTransactionHelper{ctrl: ctrl}
	mock.recorder = &MockSQLTransactionHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLTransactionHelper) EXPECT() *MockSQLTransactionHelperMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockSQLTransactionHelper) BeginTransaction() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockSQLTransactionHelperMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockSQLTransactionHelper)(nil).BeginTransaction))
}

// CommitTransaction mocks base method.
func (m *MockSQLTransactionHelper) CommitTransaction(tx *sql.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CommitTransaction", tx)
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockSQLTransactionHelperMockRecorder) CommitTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockSQLTransactionHelper)(nil).CommitTransaction), tx)
}

// RollbackTransaction mocks base method.
func (m *MockSQLTransactionHelper) RollbackTransaction(tx *sql.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackTransaction", tx)
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockSQLTransactionHelperMockRecorder) RollbackTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockSQLTransactionHelper)(nil).RollbackTransaction), tx)
}
