// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accountant-report": {
            "get": {
                "description": "collects information about accepted reservations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accountant"
                ],
                "summary": "GetAccountantReport",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AccountantReportElem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ResponseError"
                        }
                    }
                }
            }
        },
        "/balance/deposit": {
            "post": {
                "description": "deposit account if account exists, otherwise creates an account and deposi it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Deposit",
                "parameters": [
                    {
                        "description": "account id and value to deposit",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.DepositAccountDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ResponseError"
                        }
                    }
                }
            }
        },
        "/balance/get": {
            "get": {
                "description": "return balance of the account with given id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "GetBalance",
                "parameters": [
                    {
                        "description": "account id",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.GetBalanceDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ResponseError"
                        }
                    }
                }
            }
        },
        "/balance/statement": {
            "get": {
                "description": "collects information about all transfers related to given account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "GetStatement",
                "parameters": [
                    {
                        "description": "account id",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.GetAccountStatementDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StatementElem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ResponseError"
                        }
                    }
                }
            }
        },
        "/balance/transfer": {
            "post": {
                "description": "transfers money between two given accounts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "ProcessInternalTransfer",
                "parameters": [
                    {
                        "description": "transfer info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.MakeInternalTransferDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ResponseError"
                        }
                    }
                }
            }
        },
        "/balance/withdraw": {
            "post": {
                "description": "withdraw account if account exists and has enough money",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Withdraw",
                "parameters": [
                    {
                        "description": "account id and value to withdraw",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.WithdrawAccountDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ResponseError"
                        }
                    }
                }
            }
        },
        "/reservation/accept": {
            "post": {
                "description": "accept reserved reservation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "AcceptReservation",
                "parameters": [
                    {
                        "description": "reservation info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ReservationDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ResponseError"
                        }
                    }
                }
            }
        },
        "/reservation/cancel": {
            "post": {
                "description": "cancel reserved reservation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "CancelReservation",
                "parameters": [
                    {
                        "description": "reservation info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ReservationDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ResponseError"
                        }
                    }
                }
            }
        },
        "/reservation/make": {
            "post": {
                "description": "create reservation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "MakeReservation",
                "parameters": [
                    {
                        "description": "reservation info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ReservationDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.DepositAccountDto": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "dtos.GetAccountStatementDto": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "integer"
                },
                "firstSortCriteria": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "secondSortCriteria": {
                    "type": "string"
                }
            }
        },
        "dtos.GetBalanceDto": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "integer"
                }
            }
        },
        "dtos.MakeInternalTransferDto": {
            "type": "object",
            "properties": {
                "receiverId": {
                    "type": "integer"
                },
                "senderId": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "dtos.ReservationDto": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "integer"
                },
                "orderId": {
                    "type": "integer"
                },
                "serviceId": {
                    "type": "integer"
                },
                "totalCost": {
                    "type": "number"
                }
            }
        },
        "dtos.WithdrawAccountDto": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "errors.ResponseError": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                }
            }
        },
        "models.Account": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "integer"
                },
                "balance": {
                    "type": "number"
                }
            }
        },
        "models.AccountantReportElem": {
            "type": "object",
            "properties": {
                "serviceName": {
                    "type": "string"
                },
                "totalReceived": {
                    "type": "number"
                }
            }
        },
        "models.StatementElem": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "recordTime": {
                    "type": "string"
                },
                "transferType": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Balance microservice",
	Description:      "Balance service for avito internship",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
